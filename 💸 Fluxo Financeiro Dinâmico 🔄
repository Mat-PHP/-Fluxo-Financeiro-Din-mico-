import random
import pandas as pd
from dash import Dash, dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objects as go

# Inicializa a aplica√ß√£o
app = Dash(__name__)
server = app.server

# Listas para armazenar dados simulados
entradas = []
saidas = []
tempo = []

# Layout do dashboard
app.layout = html.Div(style={'backgroundColor': '#0f0f0f', 'padding': '20px'}, children=[
    html.H1("üí∏ Fluxo Financeiro Din√¢mico üîÑ", style={
        'textAlign': 'center',
        'color': '#00ffcc',
        'textShadow': '0 0 20px #00ffcc',
        'fontSize': '36px'
    }),
    dcc.Graph(id='grafico-financas', style={'height': '70vh'}),
    dcc.Interval(id='intervalo-atualizacao', interval=1000, n_intervals=0),
])

# Callback para atualizar o gr√°fico em tempo real
@app.callback(
    Output('grafico-financas', 'figure'),
    [Input('intervalo-atualizacao', 'n_intervals')]
)
def atualizar_grafico(n):
    entrada = random.randint(500, 3000)
    saida = random.randint(200, 2500)
    hora = pd.Timestamp.now().strftime('%H:%M:%S')

    entradas.append(entrada)
    saidas.append(saida)
    tempo.append(hora)

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=tempo,
        y=entradas,
        mode='lines+markers',
        name='Entradas',
        line=dict(color='lime', width=4),
        marker=dict(size=10, color='lime', line=dict(width=2, color='white')),
        fill='tozeroy',
        fillcolor='rgba(0,255,0,0.1)'
    ))

    fig.add_trace(go.Scatter(
        x=tempo,
        y=saidas,
        mode='lines+markers',
        name='Sa√≠das',
        line=dict(color='red', width=4),
        marker=dict(size=10, color='red', line=dict(width=2, color='white')),
        fill='tozeroy',
        fillcolor='rgba(255,0,0,0.1)'
    ))

    fig.update_layout(
        title="üìä Atualiza√ß√£o em Tempo Real",
        xaxis_title="‚è± Tempo",
        yaxis_title="üí∞ Valor (R$)",
        template="plotly_dark",
        font=dict(color='white'),
        paper_bgcolor='#0f0f0f',
        plot_bgcolor='#0f0f0f',
        xaxis_rangeslider_visible=False,
        transition=dict(duration=500, easing='cubic-in-out'),
        legend=dict(
            orientation="h",
            y=1.05,
            x=1,
            xanchor='right',
            yanchor='bottom'
        )
    )

    return fig

# Executa o app
if __name__ == '__main__':
    app.run(debug=True)
